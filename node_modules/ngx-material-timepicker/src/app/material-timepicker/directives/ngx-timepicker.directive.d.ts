import { ElementRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';
import { ControlValueAccessor } from '@angular/forms';
import { DateTime } from 'luxon';
import * as ɵngcc0 from '@angular/core';
export declare class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {
    private elementRef;
    private locale;
    format: number;
    private _format;
    min: string | DateTime;
    private _min;
    max: string | DateTime;
    private _max;
    timepicker: NgxMaterialTimepickerComponent;
    private _timepicker;
    value: string;
    private _value;
    disabled: boolean;
    disableClick: boolean;
    private timepickerSubscriptions;
    private previousFormat;
    onTouched: () => void;
    private onChange;
    constructor(elementRef: ElementRef, locale: string);
    readonly element: any;
    private defaultTime;
    updateValue(value: string): void;
    ngOnChanges(changes: SimpleChanges): void;
    onClick(event: any): void;
    writeValue(value: string): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    ngOnDestroy(): void;
    private registerTimepicker;
    private updateInputValue;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TimepickerDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TimepickerDirective, "[ngxTimepicker]", never, { "format": "format"; "value": "value"; "min": "min"; "max": "max"; "timepicker": "ngxTimepicker"; "disabled": "disabled"; "disableClick": "disableClick"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRpbWVwaWNrZXIuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbIm5neC10aW1lcGlja2VyLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neE1hdGVyaWFsVGltZXBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4uL25neC1tYXRlcmlhbC10aW1lcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnbHV4b24nO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGltZXBpY2tlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIHByaXZhdGUgbG9jYWxlO1xuICAgIGZvcm1hdDogbnVtYmVyO1xuICAgIHByaXZhdGUgX2Zvcm1hdDtcbiAgICBtaW46IHN0cmluZyB8IERhdGVUaW1lO1xuICAgIHByaXZhdGUgX21pbjtcbiAgICBtYXg6IHN0cmluZyB8IERhdGVUaW1lO1xuICAgIHByaXZhdGUgX21heDtcbiAgICB0aW1lcGlja2VyOiBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJDb21wb25lbnQ7XG4gICAgcHJpdmF0ZSBfdGltZXBpY2tlcjtcbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIHByaXZhdGUgX3ZhbHVlO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGRpc2FibGVDbGljazogYm9vbGVhbjtcbiAgICBwcml2YXRlIHRpbWVwaWNrZXJTdWJzY3JpcHRpb25zO1xuICAgIHByaXZhdGUgcHJldmlvdXNGb3JtYXQ7XG4gICAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkO1xuICAgIHByaXZhdGUgb25DaGFuZ2U7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgbG9jYWxlOiBzdHJpbmcpO1xuICAgIHJlYWRvbmx5IGVsZW1lbnQ6IGFueTtcbiAgICBwcml2YXRlIGRlZmF1bHRUaW1lO1xuICAgIHVwZGF0ZVZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG9uQ2xpY2soZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAodmFsdWU6IGFueSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIHJlZ2lzdGVyVGltZXBpY2tlcjtcbiAgICBwcml2YXRlIHVwZGF0ZUlucHV0VmFsdWU7XG59XG4iXX0=