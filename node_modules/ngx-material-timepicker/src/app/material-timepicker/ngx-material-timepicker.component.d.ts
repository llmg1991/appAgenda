import { EventEmitter, TemplateRef } from '@angular/core';
import { Subject } from 'rxjs';
import { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';
import { TimepickerDirective } from './directives/ngx-timepicker.directive';
import { DateTime } from 'luxon';
import { DomService } from './services/dom.service';
import { TimepickerRef } from './models/timepicker-ref.interface';
import { NgxMaterialTimepickerTheme } from './models/ngx-material-timepicker-theme.interface';
import * as ɵngcc0 from '@angular/core';
export declare class NgxMaterialTimepickerComponent implements TimepickerRef {
    private eventService;
    private domService;
    timeUpdated: Subject<string>;
    cancelBtnTmpl: TemplateRef<Node>;
    editableHintTmpl: TemplateRef<Node>;
    confirmBtnTmpl: TemplateRef<Node>;
    isEsc: boolean;
    enableKeyboardInput: boolean;
    preventOverlayClick: boolean;
    disableAnimation: boolean;
    appendToInput: boolean;
    hoursOnly: boolean;
    defaultTime: string;
    timepickerClass: string;
    theme: NgxMaterialTimepickerTheme;
    min: DateTime;
    max: DateTime;
    /**
     * @deprecated Since version 5.1.1. Will be deleted on version 6.0.0. Use @Input() theme instead
     */
    ngxMaterialTimepickerTheme: NgxMaterialTimepickerTheme;
    format: number;
    minutesGap: number;
    timeSet: EventEmitter<string>;
    opened: EventEmitter<null>;
    closed: EventEmitter<null>;
    hourSelected: EventEmitter<number>;
    timeChanged: EventEmitter<string>;
    private _minutesGap;
    private _format;
    private _ngxMaterialTimepickerTheme;
    private timepickerInput;
    private unsubscribe;
    constructor(eventService: NgxMaterialTimepickerEventService, domService: DomService);
    readonly minTime: DateTime;
    readonly maxTime: DateTime;
    readonly disabled: boolean;
    readonly time: string;
    readonly inputElement: any;
    /***
     * Register an input with this timepicker.
     * input - The timepicker input to register with this timepicker
     */
    registerInput(input: TimepickerDirective): void;
    open(): void;
    close(): void;
    updateTime(time: string): void;
    private subscribeToEvents;
    private unsubscribeFromEvents;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxMaterialTimepickerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxMaterialTimepickerComponent, "ngx-material-timepicker", never, { "isEsc": "ESC"; "hoursOnly": "hoursOnly"; "ngxMaterialTimepickerTheme": "ngxMaterialTimepickerTheme"; "format": "format"; "minutesGap": "minutesGap"; "cancelBtnTmpl": "cancelBtnTmpl"; "editableHintTmpl": "editableHintTmpl"; "confirmBtnTmpl": "confirmBtnTmpl"; "enableKeyboardInput": "enableKeyboardInput"; "preventOverlayClick": "preventOverlayClick"; "disableAnimation": "disableAnimation"; "appendToInput": "appendToInput"; "defaultTime": "defaultTime"; "timepickerClass": "timepickerClass"; "theme": "theme"; "min": "min"; "max": "max"; }, { "timeSet": "timeSet"; "opened": "opened"; "closed": "closed"; "hourSelected": "hourSelected"; "timeChanged": "timeChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1tYXRlcmlhbC10aW1lcGlja2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJFdmVudFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL25neC1tYXRlcmlhbC10aW1lcGlja2VyLWV2ZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgVGltZXBpY2tlckRpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9uZ3gtdGltZXBpY2tlci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XG5pbXBvcnQgeyBEb21TZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9kb20uc2VydmljZSc7XG5pbXBvcnQgeyBUaW1lcGlja2VyUmVmIH0gZnJvbSAnLi9tb2RlbHMvdGltZXBpY2tlci1yZWYuaW50ZXJmYWNlJztcbmltcG9ydCB7IE5neE1hdGVyaWFsVGltZXBpY2tlclRoZW1lIH0gZnJvbSAnLi9tb2RlbHMvbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXItdGhlbWUuaW50ZXJmYWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neE1hdGVyaWFsVGltZXBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIFRpbWVwaWNrZXJSZWYge1xuICAgIHByaXZhdGUgZXZlbnRTZXJ2aWNlO1xuICAgIHByaXZhdGUgZG9tU2VydmljZTtcbiAgICB0aW1lVXBkYXRlZDogU3ViamVjdDxzdHJpbmc+O1xuICAgIGNhbmNlbEJ0blRtcGw6IFRlbXBsYXRlUmVmPE5vZGU+O1xuICAgIGVkaXRhYmxlSGludFRtcGw6IFRlbXBsYXRlUmVmPE5vZGU+O1xuICAgIGNvbmZpcm1CdG5UbXBsOiBUZW1wbGF0ZVJlZjxOb2RlPjtcbiAgICBpc0VzYzogYm9vbGVhbjtcbiAgICBlbmFibGVLZXlib2FyZElucHV0OiBib29sZWFuO1xuICAgIHByZXZlbnRPdmVybGF5Q2xpY2s6IGJvb2xlYW47XG4gICAgZGlzYWJsZUFuaW1hdGlvbjogYm9vbGVhbjtcbiAgICBhcHBlbmRUb0lucHV0OiBib29sZWFuO1xuICAgIGhvdXJzT25seTogYm9vbGVhbjtcbiAgICBkZWZhdWx0VGltZTogc3RyaW5nO1xuICAgIHRpbWVwaWNrZXJDbGFzczogc3RyaW5nO1xuICAgIHRoZW1lOiBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJUaGVtZTtcbiAgICBtaW46IERhdGVUaW1lO1xuICAgIG1heDogRGF0ZVRpbWU7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgU2luY2UgdmVyc2lvbiA1LjEuMS4gV2lsbCBiZSBkZWxldGVkIG9uIHZlcnNpb24gNi4wLjAuIFVzZSBASW5wdXQoKSB0aGVtZSBpbnN0ZWFkXG4gICAgICovXG4gICAgbmd4TWF0ZXJpYWxUaW1lcGlja2VyVGhlbWU6IE5neE1hdGVyaWFsVGltZXBpY2tlclRoZW1lO1xuICAgIGZvcm1hdDogbnVtYmVyO1xuICAgIG1pbnV0ZXNHYXA6IG51bWJlcjtcbiAgICB0aW1lU2V0OiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICBvcGVuZWQ6IEV2ZW50RW1pdHRlcjxudWxsPjtcbiAgICBjbG9zZWQ6IEV2ZW50RW1pdHRlcjxudWxsPjtcbiAgICBob3VyU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIHRpbWVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICBwcml2YXRlIF9taW51dGVzR2FwO1xuICAgIHByaXZhdGUgX2Zvcm1hdDtcbiAgICBwcml2YXRlIF9uZ3hNYXRlcmlhbFRpbWVwaWNrZXJUaGVtZTtcbiAgICBwcml2YXRlIHRpbWVwaWNrZXJJbnB1dDtcbiAgICBwcml2YXRlIHVuc3Vic2NyaWJlO1xuICAgIGNvbnN0cnVjdG9yKGV2ZW50U2VydmljZTogTmd4TWF0ZXJpYWxUaW1lcGlja2VyRXZlbnRTZXJ2aWNlLCBkb21TZXJ2aWNlOiBEb21TZXJ2aWNlKTtcbiAgICByZWFkb25seSBtaW5UaW1lOiBEYXRlVGltZTtcbiAgICByZWFkb25seSBtYXhUaW1lOiBEYXRlVGltZTtcbiAgICByZWFkb25seSBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICByZWFkb25seSB0aW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgaW5wdXRFbGVtZW50OiBhbnk7XG4gICAgLyoqKlxuICAgICAqIFJlZ2lzdGVyIGFuIGlucHV0IHdpdGggdGhpcyB0aW1lcGlja2VyLlxuICAgICAqIGlucHV0IC0gVGhlIHRpbWVwaWNrZXIgaW5wdXQgdG8gcmVnaXN0ZXIgd2l0aCB0aGlzIHRpbWVwaWNrZXJcbiAgICAgKi9cbiAgICByZWdpc3RlcklucHV0KGlucHV0OiBUaW1lcGlja2VyRGlyZWN0aXZlKTogdm9pZDtcbiAgICBvcGVuKCk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICB1cGRhdGVUaW1lKHRpbWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVUb0V2ZW50cztcbiAgICBwcml2YXRlIHVuc3Vic2NyaWJlRnJvbUV2ZW50cztcbn1cbiJdfQ==