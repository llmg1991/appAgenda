import { EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';
import { Observable } from 'rxjs';
import { ClockFaceTime } from '../../models/clock-face-time.interface';
import { TimePeriod } from '../../models/time-period.enum';
import { TimeUnit } from '../../models/time-unit.enum';
import { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';
import { DateTime } from 'luxon';
import * as ɵngcc0 from '@angular/core';
export declare class NgxTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {
    private timepickerService;
    private locale;
    period: TimePeriod;
    hour$: Observable<ClockFaceTime>;
    minute$: Observable<ClockFaceTime>;
    minHour: number;
    maxHour: number;
    timeUnit: typeof TimeUnit;
    timepickerTime: string;
    hoursList: ClockFaceTime[];
    minutesList: ClockFaceTime[];
    isTimeRangeSet: boolean;
    isChangePeriodDisabled: boolean;
    disabled: boolean;
    toggleIcon: TemplateRef<HTMLObjectElement>;
    buttonAlign: 'right' | 'left';
    clockTheme: NgxMaterialTimepickerTheme;
    controlOnly: boolean;
    cancelBtnTmpl: TemplateRef<Node>;
    confirmBtnTmpl: TemplateRef<Node>;
    format: number;
    min: string | DateTime;
    max: string | DateTime;
    defaultTime: string;
    timeChanged: EventEmitter<string>;
    private _defaultTime;
    private _format;
    private _min;
    private _max;
    private previousFormat;
    private unsubscribe$;
    private isFirstTimeChange;
    private isDefaultTime;
    private selectedHour;
    private onChange;
    constructor(timepickerService: NgxMaterialTimepickerService, locale: string);
    ngOnInit(): void;
    writeValue(val: string): void;
    registerOnTouched(fn: any): void;
    registerOnChange(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    changeHour(hour: number): void;
    changeMinute(minute: number): void;
    changePeriod(period: TimePeriod): void;
    onTimeSet(time: string): void;
    ngOnDestroy(): void;
    private changeTime;
    private resetTime;
    private emitLocalTimeChange;
    private changeDefaultTimeValue;
    private updateAvailableHours;
    private updateAvailableMinutes;
    private updateAvailableTime;
    private updateTime;
    private initTime;
    private isPeriodDisabled;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxTimepickerFieldComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxTimepickerFieldComponent, "ngx-timepicker-field", never, { "buttonAlign": "buttonAlign"; "format": "format"; "min": "min"; "max": "max"; "defaultTime": "defaultTime"; "disabled": "disabled"; "toggleIcon": "toggleIcon"; "clockTheme": "clockTheme"; "controlOnly": "controlOnly"; "cancelBtnTmpl": "cancelBtnTmpl"; "confirmBtnTmpl": "confirmBtnTmpl"; }, { "timeChanged": "timeChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRpbWVwaWNrZXItZmllbGQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC10aW1lcGlja2VyLWZpZWxkLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTmd4TWF0ZXJpYWxUaW1lcGlja2VyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL25neC1tYXRlcmlhbC10aW1lcGlja2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2xvY2tGYWNlVGltZSB9IGZyb20gJy4uLy4uL21vZGVscy9jbG9jay1mYWNlLXRpbWUuaW50ZXJmYWNlJztcbmltcG9ydCB7IFRpbWVQZXJpb2QgfSBmcm9tICcuLi8uLi9tb2RlbHMvdGltZS1wZXJpb2QuZW51bSc7XG5pbXBvcnQgeyBUaW1lVW5pdCB9IGZyb20gJy4uLy4uL21vZGVscy90aW1lLXVuaXQuZW51bSc7XG5pbXBvcnQgeyBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJUaGVtZSB9IGZyb20gJy4uLy4uL21vZGVscy9uZ3gtbWF0ZXJpYWwtdGltZXBpY2tlci10aGVtZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hUaW1lcGlja2VyRmllbGRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIHByaXZhdGUgdGltZXBpY2tlclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBsb2NhbGU7XG4gICAgcGVyaW9kOiBUaW1lUGVyaW9kO1xuICAgIGhvdXIkOiBPYnNlcnZhYmxlPENsb2NrRmFjZVRpbWU+O1xuICAgIG1pbnV0ZSQ6IE9ic2VydmFibGU8Q2xvY2tGYWNlVGltZT47XG4gICAgbWluSG91cjogbnVtYmVyO1xuICAgIG1heEhvdXI6IG51bWJlcjtcbiAgICB0aW1lVW5pdDogdHlwZW9mIFRpbWVVbml0O1xuICAgIHRpbWVwaWNrZXJUaW1lOiBzdHJpbmc7XG4gICAgaG91cnNMaXN0OiBDbG9ja0ZhY2VUaW1lW107XG4gICAgbWludXRlc0xpc3Q6IENsb2NrRmFjZVRpbWVbXTtcbiAgICBpc1RpbWVSYW5nZVNldDogYm9vbGVhbjtcbiAgICBpc0NoYW5nZVBlcmlvZERpc2FibGVkOiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHRvZ2dsZUljb246IFRlbXBsYXRlUmVmPEhUTUxPYmplY3RFbGVtZW50PjtcbiAgICBidXR0b25BbGlnbjogJ3JpZ2h0JyB8ICdsZWZ0JztcbiAgICBjbG9ja1RoZW1lOiBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJUaGVtZTtcbiAgICBjb250cm9sT25seTogYm9vbGVhbjtcbiAgICBjYW5jZWxCdG5UbXBsOiBUZW1wbGF0ZVJlZjxOb2RlPjtcbiAgICBjb25maXJtQnRuVG1wbDogVGVtcGxhdGVSZWY8Tm9kZT47XG4gICAgZm9ybWF0OiBudW1iZXI7XG4gICAgbWluOiBzdHJpbmcgfCBEYXRlVGltZTtcbiAgICBtYXg6IHN0cmluZyB8IERhdGVUaW1lO1xuICAgIGRlZmF1bHRUaW1lOiBzdHJpbmc7XG4gICAgdGltZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIHByaXZhdGUgX2RlZmF1bHRUaW1lO1xuICAgIHByaXZhdGUgX2Zvcm1hdDtcbiAgICBwcml2YXRlIF9taW47XG4gICAgcHJpdmF0ZSBfbWF4O1xuICAgIHByaXZhdGUgcHJldmlvdXNGb3JtYXQ7XG4gICAgcHJpdmF0ZSB1bnN1YnNjcmliZSQ7XG4gICAgcHJpdmF0ZSBpc0ZpcnN0VGltZUNoYW5nZTtcbiAgICBwcml2YXRlIGlzRGVmYXVsdFRpbWU7XG4gICAgcHJpdmF0ZSBzZWxlY3RlZEhvdXI7XG4gICAgcHJpdmF0ZSBvbkNoYW5nZTtcbiAgICBjb25zdHJ1Y3Rvcih0aW1lcGlja2VyU2VydmljZTogTmd4TWF0ZXJpYWxUaW1lcGlja2VyU2VydmljZSwgbG9jYWxlOiBzdHJpbmcpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWw6IHN0cmluZyk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIGNoYW5nZUhvdXIoaG91cjogbnVtYmVyKTogdm9pZDtcbiAgICBjaGFuZ2VNaW51dGUobWludXRlOiBudW1iZXIpOiB2b2lkO1xuICAgIGNoYW5nZVBlcmlvZChwZXJpb2Q6IFRpbWVQZXJpb2QpOiB2b2lkO1xuICAgIG9uVGltZVNldCh0aW1lOiBzdHJpbmcpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGFuZ2VUaW1lO1xuICAgIHByaXZhdGUgcmVzZXRUaW1lO1xuICAgIHByaXZhdGUgZW1pdExvY2FsVGltZUNoYW5nZTtcbiAgICBwcml2YXRlIGNoYW5nZURlZmF1bHRUaW1lVmFsdWU7XG4gICAgcHJpdmF0ZSB1cGRhdGVBdmFpbGFibGVIb3VycztcbiAgICBwcml2YXRlIHVwZGF0ZUF2YWlsYWJsZU1pbnV0ZXM7XG4gICAgcHJpdmF0ZSB1cGRhdGVBdmFpbGFibGVUaW1lO1xuICAgIHByaXZhdGUgdXBkYXRlVGltZTtcbiAgICBwcml2YXRlIGluaXRUaW1lO1xuICAgIHByaXZhdGUgaXNQZXJpb2REaXNhYmxlZDtcbn1cbiJdfQ==