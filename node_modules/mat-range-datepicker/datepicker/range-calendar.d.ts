import { matRangeDatepickerIntl } from './datepicker-intl';
import { DateAdapter } from '../datetime/date-adapter';
import { MatDateFormats } from '../datetime/date-formats';
/**
 * Possible views for the calendar.
 * @docs-private
 */
import * as ɵngcc0 from '@angular/core';
export declare type SatCalendarView = 'month' | 'year' | 'multi-year';
/**
 * A calendar that is used as part of the datepicker.
 * @docs-private
 */
export declare class RangeCalendar<D> {
    private _dateAdapter;
    private _dateFormats;
    id: any;
    ngClass: any;
    startAt: any;
    startView: any;
    minDate: any;
    maxDate: any;
    dateFilter: any;
    beginDate: any;
    endDate: any;
    rangeMode: any;
    selected: any;
    selectedChange: any;
    dateRangesChange: any;
    yearSelected: any;
    monthSelected: any;
    _userSelection: any;
    /** Whenever user already selected start of dates interval. */
    private _beginDateSelected;
    constructor(_intl: matRangeDatepickerIntl, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats);
    _dateSelected(date: D): void;
    _getQuarterDates(quarter: number): {
        begin: D;
        end: D;
    };
    selectQuater(quarter: number): void;
    checkQuarterSelected(quarter: number): boolean;
    onCancel(): void;
    onApply(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RangeCalendar<any>, [null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RangeCalendar<any>, "range-calendar", ["matRangeCalendar"], { "beginDate": "beginDate"; "endDate": "endDate"; "id": "id"; "ngClass": "ngClass"; "startAt": "startAt"; "startView": "startView"; "minDate": "minDate"; "maxDate": "maxDate"; "dateFilter": "dateFilter"; "rangeMode": "rangeMode"; "selected": "selected"; }, { "selectedChange": "selectedChange"; "dateRangesChange": "dateRangesChange"; "yearSelected": "yearSelected"; "monthSelected": "monthSelected"; "_userSelection": "_userSelection"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UtY2FsZW5kYXIuZC50cyIsInNvdXJjZXMiOlsicmFuZ2UtY2FsZW5kYXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWF0UmFuZ2VEYXRlcGlja2VySW50bCB9IGZyb20gJy4vZGF0ZXBpY2tlci1pbnRsJztcbmltcG9ydCB7IERhdGVBZGFwdGVyIH0gZnJvbSAnLi4vZGF0ZXRpbWUvZGF0ZS1hZGFwdGVyJztcbmltcG9ydCB7IE1hdERhdGVGb3JtYXRzIH0gZnJvbSAnLi4vZGF0ZXRpbWUvZGF0ZS1mb3JtYXRzJztcbi8qKlxuICogUG9zc2libGUgdmlld3MgZm9yIHRoZSBjYWxlbmRhci5cbiAqIEBkb2NzLXByaXZhdGVcbiAqL1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBTYXRDYWxlbmRhclZpZXcgPSAnbW9udGgnIHwgJ3llYXInIHwgJ211bHRpLXllYXInO1xuLyoqXG4gKiBBIGNhbGVuZGFyIHRoYXQgaXMgdXNlZCBhcyBwYXJ0IG9mIHRoZSBkYXRlcGlja2VyLlxuICogQGRvY3MtcHJpdmF0ZVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSYW5nZUNhbGVuZGFyPEQ+IHtcbiAgICBwcml2YXRlIF9kYXRlQWRhcHRlcjtcbiAgICBwcml2YXRlIF9kYXRlRm9ybWF0cztcbiAgICBpZDogYW55O1xuICAgIG5nQ2xhc3M6IGFueTtcbiAgICBzdGFydEF0OiBhbnk7XG4gICAgc3RhcnRWaWV3OiBhbnk7XG4gICAgbWluRGF0ZTogYW55O1xuICAgIG1heERhdGU6IGFueTtcbiAgICBkYXRlRmlsdGVyOiBhbnk7XG4gICAgYmVnaW5EYXRlOiBhbnk7XG4gICAgZW5kRGF0ZTogYW55O1xuICAgIHJhbmdlTW9kZTogYW55O1xuICAgIHNlbGVjdGVkOiBhbnk7XG4gICAgc2VsZWN0ZWRDaGFuZ2U6IGFueTtcbiAgICBkYXRlUmFuZ2VzQ2hhbmdlOiBhbnk7XG4gICAgeWVhclNlbGVjdGVkOiBhbnk7XG4gICAgbW9udGhTZWxlY3RlZDogYW55O1xuICAgIF91c2VyU2VsZWN0aW9uOiBhbnk7XG4gICAgLyoqIFdoZW5ldmVyIHVzZXIgYWxyZWFkeSBzZWxlY3RlZCBzdGFydCBvZiBkYXRlcyBpbnRlcnZhbC4gKi9cbiAgICBwcml2YXRlIF9iZWdpbkRhdGVTZWxlY3RlZDtcbiAgICBjb25zdHJ1Y3RvcihfaW50bDogbWF0UmFuZ2VEYXRlcGlja2VySW50bCwgX2RhdGVBZGFwdGVyOiBEYXRlQWRhcHRlcjxEPiwgX2RhdGVGb3JtYXRzOiBNYXREYXRlRm9ybWF0cyk7XG4gICAgX2RhdGVTZWxlY3RlZChkYXRlOiBEKTogdm9pZDtcbiAgICBfZ2V0UXVhcnRlckRhdGVzKHF1YXJ0ZXI6IG51bWJlcik6IHtcbiAgICAgICAgYmVnaW46IEQ7XG4gICAgICAgIGVuZDogRDtcbiAgICB9O1xuICAgIHNlbGVjdFF1YXRlcihxdWFydGVyOiBudW1iZXIpOiB2b2lkO1xuICAgIGNoZWNrUXVhcnRlclNlbGVjdGVkKHF1YXJ0ZXI6IG51bWJlcik6IGJvb2xlYW47XG4gICAgb25DYW5jZWwoKTogdm9pZDtcbiAgICBvbkFwcGx5KCk6IHZvaWQ7XG59XG4iXX0=